数组
一、
1、Array是JavaScript的内置对象，同时也是一个构造函数，可以用它生成新的数组。
//Array构造函数有一个很大的问题，就是不同的参数，会导致它的行为不一致。
//
//// 无参数时，返回一个空数组
//new Array() // []
//
//// 单个正整数参数，表示返回的新数组的长度
//new Array(1) // [ undefined ]
//new Array(2) // [ undefined x 2 ]
//
//// 非正整数的数值作为参数，会报错
//new Array(3.2) // RangeError: Invalid array length
//new Array(-3) // RangeError: Invalid array length
//
//// 单个非正整数参数（比如字符串、布尔值、对象等），
//// 则该参数是返回的新数组的成员
//new Array('abc') // ['abc']
//new Array([1]) // [Array[1]]
//
//// 多参数时，所有参数都是返回的新数组的成员
//new Array(1, 2) // [1, 2]
//new Array('a', 'b', 'c') // ['a', 'b', 'c']

2、es6新增了Array.isArray()方法判断是否为数组
3、Array实例的方法
 @1 valueOf()
 valueOf方法返回数组本身。

@2 toString方法返回数组的字符串形式。

@3 push方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。

如果需要合并两个数组，可以这样写。

var a = [1, 2, 3];
var b = [4, 5, 6];

a.push.apply(a, b)
 等同于
a.push(4, 5, 6)
a // [1, 2, 3, 4, 5, 6]

push方法还可以用于向对象添加元素，添加后的对象变成类似数组的对象，即新加入元素的键对应数组的索引，并且对象有一个length属性。
var a = {a: 1};

[].push.call(a, 2);
a // {a:1, 0:2, length: 1}

[].push.call(a, [3]);
a // {a:1, 0:2, 1:[3], length: 2}

@4 pop方法用于删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。对空数组使用pop方法，不会报错，而是返回undefined。
push和pop结合使用，就构成了“后进先出”的栈结构（stack）。

@5 join方法以参数作为分隔符，将所有数组成员组成一个字符串返回。如果不提供参数，默认用逗号分隔。如果数组成员是undefined或null或空位，会被转成空字符串

@6 concat()
concat方法用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一个新数组，原数组不变。

除了接受数组作为参数，concat也可以接受其他类型的值作为参数。它们会作为新的元素，添加数组尾部。

如果不提供参数，concat方法返回当前数组的一个浅拷贝。所谓“浅拷贝”，指的是如果数组成员包括复合类型的值（比如对象），则新数组拷贝的是该值的引用。

var obj = { a:1 };
var oldArray = [obj];
console.log(oldAarray);
var newArray = oldArray.concat();

obj.a = 2;
newArray[0].a // 2
上面代码中，原数组包含一个对象，concat方法生成的新数组包含这个对象的引用。所以，改变原对象以后，新数组跟着改变。事实上，只要原数组的成员中包含对象，concat方法不管有没有参数，总是返回该对象的引用。

concat方法也可以用于将对象合并为数组，但是必须借助call方法。

[].concat.call({a: 1}, {b: 2})
// [{ a: 1 }, { b: 2 }]

[].concat.call({a: 1}, [2])
// [{a: 1}, 2]

[2].concat({a: 1})
// [2, {a: 1}]

@7shift()
shift方法用于删除数组的第一个元素，并返回该元素。注意，该方法会改变原数组。

shift方法可以遍历并清空一个数组[利用循环]

unshift()
unshift方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。
unshift方法可以在数组头部添加多个元素。

reverse()
reverse方法用于颠倒数组中元素的顺序，返回改变后的数组。注意，该方法将改变原数组

@8slice()
slice方法用于提取原数组的一部分，返回一个新数组，原数组不变。
它的第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。
使用格式
arr.slice(start_index, upto_index);
如果slice方法的参数是负数，则表示倒数计算的位置。
如果参数值大于数组成员的个数，或者第二个参数小于第一个参数，则返回空数组。

@9splice()
splice方法用于删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。注意，该方法会改变原数组。
splice的第一个参数是删除的起始位置，第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。
用法：arr.splice(index, count_to_remove, addElement1, addElement2, ...);

起始位置如果是负数，就表示从倒数位置开始删除。

如果只是单纯地插入元素，splice方法的第二个参数可以设为0。

如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组。

@10sort()
sort方法对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。

如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于0，表示第一个元素排在第二个元素后面；其他情况下，都是第一个元素排在第二个元素前面

es6数组新增方法
@11map()
map方法对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。
map方法接受一个函数作为参数。该函数调用时，map方法会将其传入三个参数，分别是当前成员、当前位置和数组本身。

@12forEach()
forEach方法与map方法很相似，也是遍历数组的所有成员，执行某种操作，但是forEach方法一般不返回值，只用来操作数据。如果需要有返回值，一般使用map方法。

forEach方法的参数与map方法一致，也是一个函数，数组的所有成员会依次执行该函数。它接受三个参数，分别是当前位置的值、当前位置的编号和整个数组。

forEach方法也可以接受第二个参数，用来绑定回调函数的this关键字。
forEach方法无法中断执行

forEach方法也可以用于类似数组的对象和字符串。


@13filter()
filter方法的参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组。

filter方法的参数函数可以接受三个参数，第一个参数是当前数组成员的值，这是必需的，后两个参数是可选的，分别是当前数组成员的位置和整个数组

@14some()，every()
用来判断数组成员是否符合某种条件。
它们接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。
some方法是只要有一个数组成员的返回值是true，则整个some方法的返回值就是true，否则false。
every方法则是所有数组成员的返回值都是true，才返回true，否则false。



字符串
一、
1、字符串分行
如果长字符串必须分成多行，可以在每一行的尾部使用反斜杠。
2、连接运算符（+）可以连接多个单行字符串
3、字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从0开始）。
不过，由于字符串是只读的，那些会改变原数组的方法，比如push()、sort()、reverse()、splice()都对字符串无效，只有将字符串显式转为数组后才能使用

字符串的方法
1、charCodeAt方法返回一个整数，代表指定位置字符的Unicode编码。 
strObj.charCodeAt(index) 
说明： 
index将被处理字符的从零开始计数的编号。有效值为0到字符串长度减1的数字。 
如果指定位置没有字符，将返回NaN。 
例如： 
var str = "ABC"; 
str.charCodeAt(0); 
结果：65 
2、fromCharCode方法从一些Unicode字符串中返回一个字符串。 
String.fromCharCode([code1[,code2...]]) 
说明： 
code1，code2...是要转换为字符串的Unicode字符串序列。如果没有参数，结果为空字符串。 
例如： 
String.fromCharCode(65,66,112); 
结果：ABp 
3、charAt方法返回指定索引位置处的字符。如果超出有效范围的索引值返回空字符串。 
strObj.charAt(index) 
说明： 
index想得到的字符的基于零的索引。有效值是0与字符串长度减一之间的值。 
例如： 
var str = "ABC"; 
str.charAt(1); 
结果：B 
4、slice方法返回字符串的片段。 
strObj.slice(start[,end]) 
说明： 
start下标从0开始的strObj指定部分其实索引。如果start为负，将它作为length+start处理，此处length为字符串的长度。 
end下标从0开始的strObj指定部分结束索引。如果end为负，将它作为length+end处理，此处length为字符串的长度。 
例如： 
012345 
var str = "ABCDEF"; 
str.slice(2,4); 
结果：CD 
5、substring方法返回位于String对象中指定位置的子字符串。 
strObj.substring(start,end) 
说明： 
start指明子字符串的起始位置，该索引从0开始起算。 
end指明子字符串的结束位置，该索引从0开始起算。 
substring方法使用start和end两者中的较小值作为子字符串的起始点。如果start或end为NaN或者为负数，那么将其替换为0。 
例如： 
012345 
var str = "ABCDEF"; 
str.substring(2,4); // 或 str.substring(4,2); 
结果：CD 
6、substr方法返回一个从指定位置开始的指定长度的子字符串。 
strObj.substr(start[,length]) 
说明： 
start所需的子字符串的起始位置。字符串中的第一个字符的索引为0。 
length在返回的子字符串中应包括的字符个数。 
例如： 
012345 
var str = "ABCDEF"; 
str.substr(2,4); 
结果：CDEF 
7、indexOf方法放回String对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1。 
strObj.indexOf(substr[,startIndex]) 
说明： 
substr要在String对象中查找的子字符串。 
startIndex该整数值指出在String对象内开始查找的索引。如果省略，则从字符串的开始处查找。 
例如： 
01234567 
var str = "ABCDECDF"; 
str.indexOf("CD"，1); // 由1位置从左向右查找 123... 
结果：2 
8、lastIndexOf方法返回String对象中字符串最后出现的位置。如果没有匹配到子字符串，则返回-1。 
strObj.lastIndexOf(substr[,startindex]) 
说明： 
substr要在String对象内查找的子字符串。 
startindex该整数值指出在String对象内进行查找的开始索引位置。如果省略，则查找从字符串的末尾开始。
例如： 
01234567 
var str = "ABCDECDF"; 
str.lastIndexOf("CD",6); // 由6位置从右向左查找 ...456 
结果：5 
9、search方法返回与正则表达式查找内容匹配的第一个字符串的位置。 
strObj.search(reExp) 
说明： 
reExp包含正则表达式模式和可用标志的正则表达式对象。 
例如： 
var str = "ABCDECDF"; 
str.search("CD"); // 或 str.search(/CD/i); 
结果：2 
10、concat方法返回字符串值，该值包含了两个或多个提供的字符串的连接。 
str.concat([string1[,string2...]]) 
说明： 
string1，string2要和所有其他指定的字符串进行连接的String对象或文字。 
例如： 
var str = "ABCDEF"; 
str.concat("ABCDEF","ABC"); 
结果：ABCDEFABCDEFABC 
11、将一个字符串分割为子字符串，然后将结果作为字符串数组返回。 
strObj.split([separator[,limit]]) 
说明： 
separator字符串或 正则表达式 对象，它标识了分隔字符串时使用的是一个还是多个字符。如果忽略该选项，返回包含整个字符串的单一元素数组。 
limit该值用来限制返回数组中的元素个数。 
例如： 
var str = "AA BB CC DD EE FF"; 
alert(str.split(" "，3)); 
结果： 
AA,BB,CC 
12、toLowerCase方法返回一个字符串，该字符串中的字母被转换成小写。 
例如： 
var str = "ABCabc"; 
str.toLowerCase(); 
结果：abcabc 
13、toUpperCase方法返回一个字符串，该字符串中的所有字母都被转换为大写字母。 
例如： 
var str = "ABCabc"; 
str.toUpperCase(); 
结果：ABCABC