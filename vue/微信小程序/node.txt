www.liaoxuefeng.com

1  Git是分布式版本控制系统.
2  和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。

3 版本库又名仓库，英文名repository。你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”.
  所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录
  
	进入一个文件夹  执行git init 目的是把当前的目录变成一个git仓库   repository
		$ git init
    Initialized empty Git repository in /Users/michael/learngit/.git/
    瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。

如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。


4 丝光机穿梭
   git status  查询当前状态   git status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。
   虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看
   git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式
   
   修该玩之后 在执行
		git add '要添加的文件'
		git commit -m '注释'
   提交后 在执行个git status 查看状态 会显示  Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working directory clean）的。
   
  5 版本回退
		在Git中，我们用git log命令查看。 显示从最近到最远的提交日志  如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline
		好了，现在我们启动时光穿梭机，准备把readme.txt回退到上一个版本，也就是“add distributed”的那个版本，怎么做呢？
		执行 git reset --hard HEAD^   回到上一个版本号
		git reset --hard 'commit-id'  返回的到指定的版本号   commit-id 是在你执行 git log --pretty=oneline  时所看到的一长串数字，在这里使用的时候不需要全部都输入进来，只需要输入前几位即可 6-7位左右
6 工作区和暂存区、
	工作区（Working Directory）就是你在电脑里面能看到的目录，好比文件夹。
	版本库（Repository）工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
	
	前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：

	第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
	你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
	
	工作区 ------------------------> 暂存区 -------------------------------> 分支
	        git add '文件名'                   git commit -m '注释语句'
	
7  管理修改
		在git中管理的是修改，比如你修改了一次node.txt文件 然后执行了一次git add 'node.txt'，然后有回去继续修该了node.txt文件，修改之后执行了git commit -m ''命令  这个时后你会发现 会提示第一次修改的内容会被从暂存区提交到分支，而第二次修改的则不会被提交。因为git认为，你第二次修改过后并没有执行git add 'node.txt'命令把第二次修改的内容放到暂存区。并认为此时的暂存区只有你第一次修该过后并且提交的node.txt文件。所以当你执行2次的git add 后再次commit的时候，只会把第一次的内容提交到分支上面。

8 添加远程仓库
   8.1 
    注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
   第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
   $ ssh-keygen -t rsa -C "youremail@example.com"
   创建成功后 文件保存在  C:\Users\wonyu\.ssh  下面有2个文件  id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
   第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
   为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
   8.2 添加远程仓库
   你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。
首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
  创建一个enjoy的仓库 ，填入名字之后 会生产一个其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。目前，在GitHub上的这个enjoy仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
现在，我们根据GitHub的提示，在本地的仓库下运行命令：
  $ git remote add origin git@github.com:wangyuantt/enjoy.git  后面为自己的git仓库所给的地址。
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
下一步，就可以把本地库的所有内容推送到远程库上：
	$ git push -u origin master
	把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：
从现在起，只要本地作了提交，就可以通过命令：
$ git push origin master   不需要添加 -u；
SSH警告
  当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
  The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
	RSA key fingerprint is xx.xx.xx.xx.xx.
	Are you sure you want to continue connecting (yes/no)?
	这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
	Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：
	Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
	这个警告只会出现一次，后面的操作就不会有任何警告了。

	9 创建与合并分支
	在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
	
首先，我们创建dev分支，然后切换到dev分支：
  $ git checkout -b dev
  git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
  $ git branch dev
	$ git checkout dev
	然后，用git branch命令查看当前分支：
	$ git branch
     * dev
     master
  git branch命令会列出所有分支，当前分支前面会标一个*号。
  
  然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：sss
  然后提交：
$ git add readme.txt 
$ git commit -m "branch test"

现在，dev分支的工作完成，我们就可以切换回master分支：
$ git checkout master
切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：

现在，我们把dev分支的工作成果合并到master分支上：
$ git merge dev
git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。

注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。

合并完成后，就可以放心地删除dev分支了：
$ git branch -d dev
删除后，查看branch，就只剩下master分支了：
$ git branch

注意 若是建立仓库的时候没有创建一个readme的文件，而后期又在github上面创建了一个readme文件，此时，需要执行一个命令 git pull --rebase origin master  目的是把github上面的readme文件同步到本地仓库中，否则会报错 error: failed to push some refs to 'git@github.com:wangyuantt/enjoy.git'

