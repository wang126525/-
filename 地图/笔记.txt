一、地图
	高德地图
		http://lbs.amap.com/
	腾讯地图
		http://lbs.qq.com/
	百度地图
		http://lbsyun.baidu.com/
		
		web开发---javascript开发
			左侧获取秘钥   -----    AK
				创建一个应用
					应用名称：random
					应用类型：选择浏览器端
					启用服务：需要哪个选哪个，如果不知道选什么，那就全选
					Referer白名单：那些域名可以启用地图服务，如果不确定，那么就写*
			开发指南
				简介
				坐标转换说明
				hellworld
					Doctype
						根据HTML标准，每一份HTML文档都应该声明正确的文档类型，我们建议您使用最新的符合HTML5规范的文档声明.您也可以根据需要选择其他类型的文档声明，这样浏览器会以标准的方式对页面进行渲染，保证页面最大的兼容性。我们不建议您使用quirks模式进行开发。
					设置地图区域（满屏）
					引入百度地图js文件
						<script type="text/javascript" src="http://api.map.baidu.com/api?v=2.0&ak=您的密钥"></script>
					设置地图参数
			实例demo
				各个操作一遍

二、webpack
	gulp、webpack，grunt，fekit（去哪儿网）-----前端工程化的工具
	gulp---打包、压缩、合并。。。
	webpack ---- 模块化开发、组件化的开发 ---- react使用（facebook）
	
	cnpm i webpack -g
	
	index.html
		div#app
		
		script.src="bundle.js"
	
	app.js 
		alert("helloworld");
		
	cmd  ---  转换app.js---入口文件    bundle.js---输出文件
		webpack app.js bundle.js
		
	引入css 模块
		必须转换器 style-loader  css-loader
		require("style!css!./css/main.css")
		
	如果需要更多的loader去解析文件，这样才做会很麻烦
	
	webpack.config.js  配置文件
	
		module.exports = {
			entry:"./app.js",
			output:{
				path:__dirname,
				filename:"bundle.js"
			},
			module:{
				loaders:[ //新版的是rules
					{test:/\.css$/,loader:"style!css"}
				]
			}
			
		}
				
		引入css模块
			require("./css/main.css");		
	
	模块化开发
		1、注册模块、定义模块
		
		2、暴露模块
		
		3、导入模块
		
		4、使用模块
		
	调试代码，通过source-map调试
		cnpm i source-map
		webpack --devtool source-map
		
		在控制台内的source选项中可以出现一个webpack://，此时可以进行调试自己的代码（断点调试）
		
		这种方式很麻烦，将此配置到webpack.config.js中，在此文件中添加一个选项
		devtool:"source-map"
		
	服务热替换
	
		cnpm i webpack-dev-server -g
		cnpm i webpack-dev-server --save-dev
		
		cmd
			webpack-dev-server
	package.json
		scripts
			dev:"webpack-dev-server"
			
			
		cmd
			cnpm run dev
			
	如果css文件中包含背景图片，那么我们需要一个url-loader
		cnpm i url-loader --save-dev
		
		webpack.config.js中配置   limit不清楚写多少最好不要写
			{test:/\.(jpg|png|gif)$/,loader:"url-loader?limit=1024"} 单位为B

	如果在你的项目中添加了字体文件，那么我们需要添加一个file-loader
		cnpm i file-loader --save-dev
	添加配置文件
		{test:/\.(eot|woff|svg|ttf|woff2|gif|appcache)(\?|$)/,loader:'file-loader?name=[name].[ext]'}
	
	scss 模块
		cnpm i sass-loader --save-dev
			如果提示node-sass模块没有安装  cnpm i node-sass --save-dev
			
		require("./scss/my.scss")
		
		配置文件   --   从右往左执行
			{
				test:/\.scss$/,
				loader:"style-loader!css-loader!sass-loader"
			},

	less 模块
		cnpm i less-loader --save-dev
		如果提示less块没有安装  cnpm i less --save-dev
		require("./less/my.less")
		
		配置文件   --   从右往左执行
			{
				test:/\.less/,
				loader:"style-loader!css-loader!less-loader"
			},
			
	
	如果项目中要使用es6构建
		在webpack.config.js的同级目录下创建一个文件  ---- 预设文件
			.babelrc
				{
					presets:["es2015"]
				}
		
		安装依赖的模块
			cnpm i babel-preset-es2015 --save-dev
			cnpm i babel --save-dev
			cnpm i babel-core --save-dev
			cnpm i babel-loader --save-dev
			
		修改配置文件
			{test:/\.js$/,loader:"babel-loader"}
			
			
		cnpm run dev
		
		
		md/test.js
		//暴露代码
			export default {
				add(){
					return "helloworld11111111111111"
				}
			}
		//引入
			import "./css/main.css"
			import test from "./md/test.js"
			